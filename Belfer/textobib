#!/usr/local/bin/perl
my @START = ('MCS', 'CS', '');             # default input prefixes
my $END_OF_HEADING = "\\\\smallskip";      # a line following the title.
my @SEPARATORS = ('and', '&', ',', ';');
my @MONTHS = (January, February, March, April, May, June, July, August, September, October, November, December);

my $BIB_VERSION = "CS-TR-v2.1";
my $MAX_BIB_LINE = 79;
my $BIB_AUTHORITY = "ncstrl.weizmann_il";  # default prefix
my $DEFAULT_DATE = "January 1";

my $Output_Entry = "";                     # Month day, Year
my $This_Year = "";
my $InputFile = "abstracts.tex";
my $HtmlFile = "textohtml.html";
my $DummyFile = "/tmp/textohtml.dummy";
my $Dir_Path = "ncstrl";

# Initial year/index for BIB_ID to become MCS.
my $MCS_YEAR = 1999;
my $MCS_INDEX = 10;

my @Abstracts;
my $Authors;
my @Authors;
my $Title;
my $Date;
my $Lines;
my $Filtered;


my %IGNORE = (
	      "bf" => 1,
	      "it" => 1,
	      "rm" => 1,
	      "sl" => 1,
	      "tt" => 1,
	      "cal" => 1,
	      "vfill" => 1,
	      "eject" => 1,
	      "endpage" => 1,
	      "linebreak" => 1,
	      "bigskip" => 1,
	      "medskip" => 1,
	      "smallskip" => 1,
	      "noindent" => 1,
	      "quad" => 1,
	      "bye" => 1,
	       "\"" => 1,
	       "\." => 1,
	       "\^" => 1,
	       "'" => 1,
	       "`" => 1,
	       "=" => 1,
	       "!" => 1,
	       "/" => 1,
	       "~" => 1,
);

my %REPLACE = (
              "ldots" => "...",
              "par" => "<P>",
	       "," => " ",
);

sub replace
{
  my $part = shift;
  $part =~ s/\{//g;
  $part =~ s/\}//g;
  $part =~ s/\$//g;
  $part =~ s/~/ /g;
  $Filtered .= $part;
}
	       

sub backslash
{
  my $reply = "";

  $_ = shift;
  if (/^(\W)(.*)$/) {
    $reply = $2;
    my $replace = $REPLACE{$1};
    if ($replace) {
      $Filtered .= $replace;
    }
    elsif (!$IGNORE{$1}) {
      $Filtered .= $1;
    }
  }
  else {
    (/^(\w+)(.*)$/);
    my $word = $1;
    $reply = $2;
    if ($IGNORE{$word}) {
      s/^ *(.*)$/$1/;
    }
    elsif ($REPLACE{$word}) {
      $Filtered .= $REPLACE{$word};
    }
    else {
      $Filtered .= "\\$word";
    }
  }
  $Filtered =~ s/<P><P>/<P>/g;
  return $reply;
}


sub filter_tex
{
  my @lines = split /\\/, shift, 2;

  $Filtered = "";
  while (scalar @lines) {
    my ($part, $rest) = @lines;
    replace($part);
    if ($rest) {
      my $result = backslash($rest);
      @lines = split /\\/, $result, 2;
    }
    else {
      last;
    }
  }
  $Filtered =~ s/^(.*)% *$/$1/;
  $Filtered =~ s/^ *(\S.*)/$1/;
  $Filtered =~ s/  / /g;
  $Filtered =~ s/(.*)<P> *$/$1/g;
  
  return $Filtered;
}

sub format_output
{
  my $line = (shift) . '::';
  my @text = split / +/, shift;
  my $min  = length($line);
  my $word;

  foreach $word (@text) {
    if (length($line) + length($word) > $MAX_BIB_LINE - 1 &&
        length($line) > $min) {
      print BIB "$line\n";
      $line = "";
      $min = 1;
    }
    $line .= " $word";
  }
  print BIB "$line\n";
}


sub read_abstracts
{
  my $lines = undef;
  while(<ABSTRACTS>) {
    chomp;
    $_ =~ s/^(.*)\s\s+(.*)$/$1 $2/g;
    if (!defined($lines)) {
      $lines = $_;
    }
    else {
      $lines .= ($_ ne "") ? "\n$_" : "\n\\par";
    }
  }
  @Abstracts = split /\\offset\{\d+pt\}/, $lines;
  shift @Abstracts;
}
  
sub next_abstract
{
  $Lines = shift @Abstracts;
  my $line;

  ($line, $Lines) = split /\}\}\n/, $Lines, 2;

  if ($line =~ /^\s*\{\{\\bf (\D*)(\d+)-+(\d+)$/) {
    foreach (@START) {
      if ($_ eq $1) {
	return "$2-$3";
      }
    }
    print STDERR "ID does not match any of @START for \" $1$2--$3\"\n";
    exit;
  }
  ($_) = split /\}\}/, $Lines;
  print STDERR "Invalid ID format: \"$_\}\}\"\n";
  exit;
}

sub extract_author
{
  @author = undef;

  $Authors =~ s/^\s+(\S.*)$/$1/;
  while ($Authors) {
    my $part = "";
    ($part, $Authors) = split / /, $Authors, 2;
    if (!$part) {
      print STDERR "No more parts\n";
      return undef;
    }
    my $separator;
    foreach $separator (@SEPARATORS) { 
      if ($separator =~ /\W/) {
	my $x = index $part, $separator;
	if ($x >= 0) {
	  if ($x > 0) {
	    push @author, (substr $part, 0, $x);
	  }
	  if ($x < length($part) - 1) {
	    $Authors = (substr $part, $x+1) . ' ' . $Author;
	  }
	  return @author;
	}
      }
      elsif ($part eq $separator) {
	return @author;
      }
    }
    push @author, $part;
  }
  return @author;
}

sub extract_authors
{
  ($Authors, $Lines) = split /:/, $Lines, 2;
  $Authors =~ s/^\s+(.*)/$1/;
  $Lines =~ s/^\s+(.*)/$1/;

  filter_tex($Authors);
  $Authors = $Filtered;

  while ($Authors) {
    my @author = extract_author();
    my $name = pop @author;
    if ($name) {
      if ($name =~ /^\(.*\)$/) {
	my $former = $name;
	$name = pop @author;
	if ($name) {
	  push @author, $former;
	}
	else {
	  $name = $1;
	}
      }
      $name = join ' ', $name . ',', @author;
      # Press out any double-spaces.
      $name =~ s/^ *(\S+)  (.*)$/$1 $2/g;
      push @Authors, $name;
    }
  }
}

sub extract_title
{
  $Date = "";
  ($Title, $Lines) = split /$END_OF_HEADING/, $Lines, 2;
  my ($front, $title, $rest) = split /\~\~/, $Title, 3;
  chomp $title;
  chomp $rest;
  if ($front) {
    $Title = $front;
    if ($title) {
      $Date = $rest ? "$title~~$rest" : $title;
    }
    else {
      $Date = $rest;
    }
  }
  else {
    $Date = $rest;
    $Title = $title;
  }
  $Title = "~~$Title";
  $Lines =~ s/^\s*(\S.*)$/$1/;
}


sub   check_date
{
  if ($Date =~ /^\s*(\w+)\s*$/) {
    $Date = "$1 $This_Year";
  }
  elsif ($Date =~ /^\s*(\w+)\W+(\d+)\s*$/) {
    my $month = $1;
    my $value = $2;
    if ($value < 90) {
      $Date = "$month $value, $This_Year";
    }
    else {
      $value += 1900 if $value < 1900;
      $Date = "$month $value";
    }
  }
  elsif ($Date =~ /^\s*(\w+)\W+(\d+)\W+(\d+)\s*$/) {
    $Date = "$1 $2, $3";
  }
  else {
    $Date = "$DEFAULT_DATE, $This_Year";
  }
}


sub textohtml
{
  my $text = shift;
  open TMP, "|/usr/local/bin/tth > $HtmlFile 2> $DummyFile";
  print TMP $text;
  close TMP;
  open TMP, "< $HtmlFile";
  $text = join ' ', <TMP>;
  close TMP;
  unlink $HtmlFile, $DummyFile;
  ($_, $text) = split /<\/title>/, $text, 2;
  my @text = split /\n/, $text;
  pop @text;
  pop @text;
  $text = join ' ', @text;
  $text =~ s/^\s+(\S.*)$/$1/;
  $text =~ s/^(?:&nbsp;)*(.*)$/$1/;
  while ($text =~ s/^(.*)\s*<\w+>\s*$/$1/) { }
  return $text;
}


sub compute_docname
{
  my ($year, $prefix, $index) = @_;
  return $year >= $MCS_YEAR && $index >= $MCS_INDEX ?
    "MCS$prefix-$index" : "CS$prefix-$index";
}

# main

$InputFile = shift @ARGV if scalar(@ARGV);
$Dir_Path = shift @ARGV if scalar(@ARGV);

open(ABSTRACTS, $InputFile) or die "Can't open $InputFile - $!\n";

my ($sec, $min, $hour, $mday, $mon, $year) = localtime;
$Output_Entry = $MONTHS[$mon] . " $mday, " . ($year +1900); 

read_abstracts();
while (scalar @Abstracts) {
  my ($year, $index) = split /-/, next_abstract();
  $This_Year = $year < 80 ? 2000+$year : ($year <= 99 ? 1900+$year : $year);

  undef @Authors;
  extract_authors();

  extract_title();

  check_date();

  my $docname = compute_docname($This_Year, $year, $index);
  mkdir "$Dir_Path/$docname", 7*64 + 7*8 +5;
  open(BIB, "> $Dir_Path/$docname/$docname.bib") or
    die "Can't open $Dir_Path/$docname/$docname.bib - $!\n";
  format_output("BIB-VERSION", $BIB_VERSION);
  format_output("ID", "$BIB_AUTHORITY//$docname");
  format_output("ENTRY", $Output_Entry);
  format_output("DATE", $Date);
  foreach $author (@Authors) {
    format_output("AUTHOR", $author);
  }
  format_output("TITLE", textohtml($Title));
  format_output("ABSTRACT", textohtml($Lines));
  format_output("END", "$BIB_AUTHORITY//$docname");
  close BIB;
}
close ABSTRACTS;
