Representations and transformations of the PiFcp language to Compound Fcp

<message>        ::~ <pi_message>

  <pi_message>     ::= <sender>(<message_content>, <choice_tag>, <choice>)

  <sender> identifies the process which sent the <message>.  When the
           <message> is part of a mixed choice, the identifier is dynamically
           unique; it is used to identify all messages offered by the
           <process>, in order to exclude such messages from being chosen
           by a <receive> of the same process instance.  Uniqueness is
           guaranteed up to a run of the Logix system, by using a monitor
           to generate the identifier.

  <message_content> is [] or a tuple of <pi_channel>s.
  <choice_tag> is an integer.
  <choice> is writable until the <message> is received or withdrawn - then it
           is assigned an integer.

<channel>        ::~ <pi_channel>

  <pi_channel>     ::= <creator>(<fcp_channel>, <message_stream>)

  <creator> identifies the <process> which created the channel; it is used
            for debugging and includes the <variable> representing the channel
            and the <name> of the creating <process>.

   <fcp_channel> is used to <send> a <message> on the <channel>, appending
                 the corresponding <pi_message> to the <message_stream>.

  <message_stream> ::= _
                       [<pi_message> | <message_stream>]

When a <channel> name begins with a lower case letter, the transformation
converts it to an Fcp variable of the same name; declared process names
begin with an upper case letter.

To <receive> a <message> the two/three corresponding Fcp clauses cdr down
the <message_stream> to a <pi_message> whose <choice> is writable, and which
was NOT offered (sent) by another <clause> of the same active <process>
(This may occur in a mixed choice <process>.)  The <choice_tag> and the
<choice> of the selected <pi_message> are unified to consume the <message>. 

To <send> one or more synchronized <message>s, a procedure offers the
<message>(s) by writing each <pi_message> on its communication channel. 
When multiple <pi_message>s are offered, they share the same <choice>
variable.  The <process> then waits in a generated procedure for a <pi_message>
to be chosen by some receiver, which unifies the <choice_tag> with the
<choice>, effectively withdrawing all other offered <pi_message>s.  The
procedure commits to the <body> corresponding to the chosen <message>.  When
the <process> includes one or more <receive>s, the corresponding Fcp clauses
are in the generated procedure; in this case, if some other sender is
synchronized with the received <pi_message>, the offered <message>s are
withdrawn by unifying <choice> with 0.

Each <process> is represented by an Fcp procedure.  Each <channel> which is an
parameter or an added <channel> of the <process> is represented by a
<pi_channel> - the Fcp variable which represents the <pi_channel> has the same
name as the <channel>.

A <program> defines a scope which is global to every <process> which is
defined within the <program>.

A <process> defines a scope within which each <channel> in the containing
scope is defined.  This is implemented by adding each <channel> to the
parameters of the Fcp procedure definitions and to calls within the Fcp
procedure.

Fcp procedures within a scope are renamed as necessary to avoid naming
conflicts with procedures in containing or parallel scopes.

A <new_scope> in a <call> is represented by an invented Fcp procedure.  The
brackets (<< >>) define a nested scope. The invented Fcp procedure and each Fcp
procedure representing a <process> within the scope has an augmented parameter
list as above.

Each <process> defined in the outermost scope of the program is like an
independant program - such <process>es do not share any context.


A PiFcp process is transformed into a procedure as follows.


Each <process> in the <program> is transformed into one Fcp procedure with
the same name, if it does not have an added <channel_list> - i.e. its
<left_hand_side> is an <atom>.  Otherwise, it is transformed into two
Fcp procedures.  The first procedure initializes each added channel and calls
the second procedure.

The parameter <channel_list> of a <process> (if any) consists of channels
which have been initialized elsewhere.

A procedure in the outermost scope has no additional parameters.  Its
<channels_list>s form the base channel-set for all scopes which are defined
within its <process>.  Each <process> defines a scope.

For each procedure defined within a scope, the scope's channel-set is reduced
by removing any channels which are explicitly declared by the procedure's
<process>.  The defined parameters of the procedure are the declared parameters
of its <process>, followed by the reduced channel-set of the containing scope,
followed by any added channels.  These defined parameters form the base
channel-set of the inner scope.

When a <receive> in a <synchronized_guard> instantiates a channel whose name
is in the channel-set of the scope, that instance and all subsequent instances
of the channel in the same <synchronized_clause> are renamed, by appending a
single-quote (') to its name.

A channel whose name is not in the channel-set of the scope and which is
instantiated by a <receive> in a <synchronized_guard>, is referred to as a
"local" channel.  A local channel is added to the channel-set of its scope,
within the <synchronized_clause> in which it is declared; this is significant
for any <new_scope> which is declared within the <body> of the clause.

A <new_scope> within a <process> has the same semantics as a declared
<process>, except that it can only be activated by commitment of its clause,
not called; in addition it may contain <process_definitions> whose <process>es
can only be referred to within the declared scope.

When a <process> includes a <receive> in a <synchronized_clause>, an additional
procedure is invented.  The first procedure implements all <send> offers, and
call the additional procedure.  The additional procedure commits to the
corresponding <body> when the offer is accepted.  In the case of mixed choice
<synchronized_clauses>, a <synchronized_guard> <receive> <communication> may
commit instead, in which case all of the offers are withdrawn.

A <call> to <atom> or to <name>( <substitution_list> ) to a <process> within
the same <program> is implemented by a compound-fcp call to the named
procedure:  name  or  name+(substitutes)  as appropriate.

A <communication> in the <body> is implemented by a logix library macro.

An <external_call> is implemented by a logix Remote Procedure Call - it is not
synchronized.


Note:

The initial version of the transformation requires that no two <process>es
within a <program> have the same name.
