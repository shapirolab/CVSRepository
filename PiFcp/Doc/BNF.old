BNF for PiFcp

<program>              ::= <process_definitions> .

<process_definitions>  ::= <process>
                           <process> . <process_definitions>

<process>              ::= <left_hand_side> :- <right_hand_side>

<left_hand_side>       ::= <atom>
                           <atom>+<stochastic_channel>
                           <atom>+(<stochastic_channel_list>)

<atom>                 ::= <name>
                           <name>(<channel_list>)

<stochastic_channel_list>
                       ::= <stochastic_channel>
                           <stochastic_channel> , <stochastic_channel_list>

<channel_list>         ::= <channel>
                           <channel> , <channel_list>

<stochastic_channel>   ::= <channel>
                           <channel>(<number>)
                           <channel>(<number>, <number>)

<right_hand_side>      ::= <synchronized_clauses>
                           <logix_guard_clauses>
                           <comparison_clauses>
                           <body>

<synchronized_clauses> ::= <synchronized_clause> 
                           <synchronized_clause> ; <synchronized_clauses>

<synchronized_clause>  ::= <communication> | <right_hand_side>
                           <cdr> | self

<communication>        ::= <receive>
                           <send>

<receive>              ::= <channel> ? <message>

<send>                 ::= <channel> ! <message>

<message>              ::= []
                           {<channel_list>}

<logix_guard_clauses>  ::= <logix_guard_clause> 
                           <logix_guard_clause> ; <logix_guard_clauses>

<logix_guard_clause>   ::= {<logix_guard_list>} | <right_hand_side>

<logix_guard_list>     ::= <logix_ask_guard>
                           <logix_ask_guard> , <logix_guard_list>

<comparison_clauses>   ::= <comparisons>
                           <comparisons> ; otherwise | <right_hand_side>

<comparisons>          ::= <comparison_clause>
                           <comparison_clause> ; <comparisons>

<comparison_clause>    ::= <comparison> | <right_hand_side>

<comparison>           ::= <compare>
                           <compare> & <comparison>

<compare>              ::= <channel> =?= <channel>
                           <channel> =\= <channel>

<body>                 ::= <call>
                           <call> , <body>

<call>                 ::= <local_sum>
                           <communication>
                           << <new_scope> >>
                           <external_call>
                           {<logix_goal_list>}
                           self
			   self( <substitution_list> )
                           true

<local_sum>            ::= <local_call>
                           <local_sum> + <local_call>

<local_call>           ::= <atom>
                           <name>( <substitution_list> )

<substitution_list>    ::= <substitution>
                           <substitution> , <substitution_list>

<substitution>         ::= <channel> = <channel>

<new_scope>            ::= <stochastic_channel_list> . <scope_content>
                           <scope_content>

<scope_content>        ::= <right_hand_side>
                           <right_hand_side> . <process_definitions>

<external_call>        ::= <logix_term>#<atom>
                           <logix_term>#<logix_goal>
                           <logix_term>#<external_call>

<logix_goal_list>      ::= <logix_goal>
                           <logix_goal> , <logix_goal_list>

Primitives:


A <channel> is an alpha-numeric string, beginning with an alphabetic character,
which may contain underscore (_) characters, or it is just an underscore
character.  By convention the <channel> "_" is anonymous; it may not be used
as a parameter or as an added <channel> of a <left_hand_side>.


A <name> is an alpha-numeric string, beginning with an upper case letter, which
may contain underscore (_) characters.


A <logix_ask_guard> is any predicate permitted in the ask of a guard in logix
language(compound).

A <logix_goal> is any predicate permitted in the right-hand-side of a clause
in logix language(compound).

A <logix_term> is any term permitted in logix language(compound).  This
includes <logix_ask_guard> and <logix_goal>, as well as arbitrary tuples,
lists and channels.


Notes:

Any channel may have a value which is an arbitrary <logix_term>.  Such
values may be tested or manipulated by a <logix_ask_guard> or by a
<logix_goal>.  A channel whose name begins with a capital letter is most
convenient for this purpose.  An arbitrary <logix_term> can be sent in a
message by the library <logix_goal> :

    pi_send(<sender>, <message_content>, <channel>)

e.g.

    pi_send("me.C", {"A string", a(Tuple), [A, list | Tail]}, C)


The "new" predicate has been subsumed into a prefix <channel_list> of
a <new_scope> and the added <channel_list> of a <process>.


The <channel>s in the <arguments> of a <process> are provided by a caller.
A <channel> may be "extruded" from a <process> by a <send> to such an argument
channel.


A <process> which is declared at level one of a <program> definition, may be
called by an external process.


Nested "new" processes are scoped with angle brackets (see definition of
<new_scope>).


Within a <logix_term>, normal logix recognition of variables applies - i.e.
variable names all begin with a capital letter or underscore; to reference a
<channel> whose name begins with a lower case letter, within a <logix_term>,
refer to '_var'(<channel_name>.


The reserved words are "self" and "true".

"self" may be used to iterate any process, including anonymous processes.
"true" should only be needed as the only <call> in the <body> of a clause.


Channel typing has been omitted.


The additive definition of <left_hand_side> is syntactic sugar - e.g.

    P+(<channel_list>) :- <right_hand_side>.

is equivalent to:

    P :- << <channel_list> . P1 . P1 :- <right_hand_side> >> .

The recursive definition of <right_hand_side> is syntactic sugar - e.g.

    P :- <communication1> | ({<logix_guard_list>} | Q;
         <communication2> | (<comparison> | R; otherwise | S).

is equivalent to:

    P :- <communication1> | << P1 . P1 :- {<logix_guard_list>} | Q >>;
         <communication2> | << P2 . P2 :- <comparison> | R ; otherwise | S >>.

and

    P :- <communication> | ( {<logix_guard_list1>} | Q ;
                             {<logix_guard_list2>} | R ) .

is equivalent to:

    P :- <communication> | << P1 . P1 :- {<logix_guard_list1>} | Q ;
                                         {<logix_guard_list2>} | R >> .


A <local_call> in a <local_sum> must be to a <process> whose <right_hand_side>
consists of <synchronized_clauses>.
