A channel is characterized by a name, an identifier, a locus, a rate 
and a weighter.  A public channel has identifier 0; a private channel 
(originally created by declaration - e.g. P+pc ::= ...) has a unique 
identifier.  The name and identifier are referred to below as the
channel's id.

The locus and function of a channel is one of:

  LOCAL        message communication within an ambient;
  P2C          message communication between a parent ambient and its
               child ambients;
  S2S          message communication between sibling ambients of the
               same parent ambient;
  MERGE        capability communication between merging child ambients
               of the same parent ambient;
  ENTER        capability communication between two ambients changing
               from siblings to parent-child;
  EXIT         capability communication between two ambients changing
               from parent-child to siblings.

Channels which differ in name, identifier or locus are different
channels; channels which have the same name, identifier and locus are
identical.


A channel may be created in one of several ways.

1. By declaration of a private channel:

   The channel is created with a given name, a unique identifier,
   given or defaulted rate and weighter and with locus LOCAL.

2. By public declaration:

   If the channel does not already exist, it is created with a given
   name, identifier 0, given or defaulted rate and weighter and with
   locus LOCAL.

3. By inheritance when a new ambient is declared:

   The declaration creates a new ambient dynamically.  Consider all
   of the LOCAL channels in the ambient of the process which declares
   the new ambient.  All such channels which are needed by the
   transitive closure of the process and its continuations are inherited
   by the new ambient.  A  fresh version of each channel is created,
   with copied id, rate and weighter and with locus LOCAL.  All of the
   created channels are in the new ambient.

4. By s2s reference in a process in a child ambient:

   e.g.     s2s siblings ? []

   The created channel has locus S2S.  It is in the parent ambient
   of the referencing process's ambient.

5. By a p2c reference from a process in an ambient:

   e.g.     p2c child ! []

   The created channel has locus P2C.  It is in the referencing ambient.

6. By a c2p reference from a process in a child ambient:

   e.g.     c2p parent ! []

   The created channel has locus P2C.  It is in the parent ambient.

7. By a merge+ or merge- capability reference from a process in a 
   child ambient:

   e.g.s    merge+ sibling
            merge- sibling

   The created channel has locus MERGE.  It is in the parent ambient.
   When the capability is performed, the former merge- ambient disappears,
   and its component processes are transferred to the merge+ ambient.

8. By an expel capability reference from a parent ambient, or by an exit
   capability reference from a child ambient:

   e.g.s    expel child
            exit parent

   The created channel has locus EXIT.  It is in the parent ambient.
   When the capability is performed, the ambients become siblings.

9. By an enter capability reference from a sibling, or by an accept
   capability reference in a sibling.

   e.g.s    enter sibling
            accept sibling

   The created channel has locus ENTER.  It is in the parent of the
   two siblings.  When the capability is performed, the entering
   ambient becomes a child of the accepting ambient.

10. By receipt of a message from another ambient via directed channel
   communication:

   e.g.s    s2s x ? {c}
            c2p y ? {c}
            p2c z ? {c}

   The created channel (c) has the same id, rate and weighter as the
   channel which was sent.  Its locus is LOCAL.

11. By capability communication (see implementation notes below).


Re-declaration of a public channel must specify the same rate and weighter 
as the existing public channel.

In case 2, if a channel with the same id but of locus other than LOCAL
already exists, the created public channel must have the same rate and 
weighter as the existing channel.

In cases 4-10 the channel is created by reference to an existing LOCAL
channel which already exists within the same ambient as the referencing
process.  The id, rate and weighter of the created channel  are copied 
from the referenced channel.

In cases 4-11, if another channel in the  target ambient has the same
id (but a different locus) as the created  channel, it must  have the 
same rate and weighter.

Note that in cases 3-11, the id, rate and weighter of the original channel
created in case 1 or case 2 is conserved - only the locus can change.
  
When a channel could have been created in cases 3-11, but a channel with 
the same id and of the appropriate locus already exists in the target
ambient, the rate and weighter of the existing channel must match the
rate and weighter of the created channel.


Implementation Notes
--------------------

  * Concatenated names are formed with a dot (.) separating component
    names.

  * The identifier of a public channel is implicit; the channel's id
    is its name.

  * The identifier of a private channel is a unique positive integer;
    the channel's id is a 2-tuple, whose functor is the channel's
    name, and whose argument is the channel's identifier.

  * When creating a channel in cases 3 and 10, the creating ambient loses
    a reference to the channel, while the new ambient gains a reference
    to it.

  * When an ambient EXITs from its parent ambient or ENTERs a sibling
    ambient, all of its references to non-LOCAL channels of its parent
    are transferred to the correponding channels of the new parent.
    This may require creation of non-LOCAL channels in the new parent,
    with unchanged locus, id, rate and weighter; references to the
    channel are transferred from the old parent to the new parent.

  * When an ambient MERGEs into a sibling ambient, all of its channels
    and references to them are transferred to the merged ambient.

