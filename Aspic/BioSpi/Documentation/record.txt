The spi_record process (see Aspic-release/SpiFcp/Documentation/record.txt)
may also be used to run an Ambient Calculus process and record its
behavior.

An <ambient identifier> is either "system", the name of the root of
the ambient tree, or has the form:

   <ambient name>(<unique identifier>)

where <unique identifier> is a positive integer, which is unique
within the ambient tree.

Every <process name> is compounded from the <ambient identifier> and
the actual process name - e.g.

      -molecule(2):LBD
      -cell(3):EC
      +molecule(2):Bound_LBD

  A fourth form of file element is:

   d. !<ambient identifier>, which indicates termination (usually
      via merge- ) of the ambient - e.g.

      !molecule(9)

   e. Another form of file element is:

      <ambient_action> <ambient identifier> <ambient identifier>

      where <ambient_action> is one of:

      (1) "new", indicating creation of an ambient - e.g.

          new molecule(15)  molecule(12)

      (2) one of the capability functors, "merge", "enter", "exit" - e.g.

          enter molecule(5) cell(2)

      (3) "done", indicating termination of a nested ambient - e.g.

          done molecule(3) cell(2)

      (4) "terminated" indicating termination of the ambient tree -

          terminated system system

      This form is used when the designated format is "ambient".
      For "new" and "done" the first <ambient identifier> designates
      the active ambient, and the  second designates its parent.

      For functors "enter" and "exit" the first <ambient identifier>
      designates the active ambient, and the  second designates its
      resultant parent.

      For functor "merge", the first <ambient identifier> designates
      the merging ambient, and the second designates its target sibling.


Inter-ambient communications in annotated output include a locus or
capability indicator - e.g.

   from record(receptor_endo#"System",rrr,20,process) :

      -molecule(2):LBD -> s2s bind
      -cell(3):EC <- s2s bind

      -cell(3):EC.1 -> p2c recbb
      -molecule(6):IC <- c2p recbb

   from record(porin#"System",ppp,10,creator) :

      -molecule(3):Molecule.0 -> enter cell1
      -cell(6):Porin.0 <- accept cell1

      -molecule(2):Molecule.0 -> exit cell2
      -cell(6):Porin.0 <- expel cell2

   from record(complex_merge#"System",mmm,10,full) :

      -molecule(4):Domain1A.1.1.1 -> merge- pa: ProteinA.0.pa(1)
      -molecule(5):Domain1B.1 <- merge+ pa: ProteinA.0.pa(1)
