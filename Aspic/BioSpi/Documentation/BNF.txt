BNF for AmbFcp

<program>              ::= <amb_attributes> . <process_definitions> .
                           <process_definitions> .

<amb_attributes>       ::= <amb_attribute>
                           <amb_attribute> . <amb_attributes>

<amb_attribute>        ::= <export_declaration>
                           <global_declaration>
                           <default_base_rate_declaration>
                           <default_weighter_declaration>

<export_declaration>   ::= export(<process_name_list>)

<global_declaration>   ::= global(<global_declaration_list>)

<default_baserate_declaration>
                       ::= baserate(<base_rate>)

<default_weighter_declaration>
                       ::= weighter(<weighter_declaration>)

<process_name_list>    ::= <process_name>
                           <process_name> , <process_name_list>

<weighter_declaration> ::= <weighter>
                           <weighter>(<weighter_parameter_list>)

<weighter_parameter_list>
                       ::= <real number>
                           <real number> , <weighter_parameter_list>

<global_declaration_list>
                       ::= <channel_declaration>
                           <channel_declaration> , <global_declaration_list>

<channel_declaration>  ::= <channel>
                           <channel>(<base_rate>)
                           <channel>(<base_rate> , <weighter_declaration>)

<base_rate>            ::= <number>
                           infinite

<process_definitions>  ::= <process>
                           <process> . <process_definitions>

<process>              ::= <left_hand_side> ::= <right_hand_side>

<left_hand_side>       ::= <atom>
                           <atom>+<new_declaration>
                           <atom>+(<new_declaration_list>)

<atom>                 ::= <process_name>
                           <process_name>(<argument_list>)

<new_declaration_list> ::= <new_declaration>
                           <new_declaration> , <new_declaration_list>

<new_declaration>      ::= <channel_declaration>
                           <logix_variable>

<argument_list>        ::= <argument>
                           <argument> , <argument_list>

<argument>             ::= <channel>
                           <logix_variable>

<right_hand_side>      ::= <communication_clauses>
                           <comparison_clauses>
                           <logix_guard_clauses>
                           <body>

<communication_clauses>
                       ::= <communication_clause> 
                           <communication_clause> ; <communication_clauses>

<communication_clause> ::= <communication> , <right_hand_side>

<communication>        ::= <receive>
                           <send>
                           <capability>

<receive>              ::= <channel> ? <transmission>
                           <direction><channel> ? <transmission>

<send>                 ::= <channel> ! <transmission>
                           <direction><channel> ! <transmission>

<direction>            ::=  local
                            p2c
                            c2p
                            s2s

<transmission>         ::= <message>
                           <multiplier> * <message>
                           <message> * <multiplier>

<message>              ::= []
                           {<argument_list>}

<multiplier>           ::= <positive_integer>

<capability>           ::= enter <channel>
                           accept <channel>
                           exit <channel>
                           expel <channel>
                           merge - <channel>
                           merge + <channel>
                           <logix_variable>

<comparison_clauses>   ::= <comparisons>
                           <comparisons> ; otherwise , <right_hand_side>

<comparisons>          ::= <comparison_clause>
                           <comparison_clause> ; <comparisons>

<comparison_clause>    ::= <comparison> , <right_hand_side>

<comparison>           ::= <compare>
                           <compare> & <comparison>

<compare>              ::= <channel> =?= <channel>
                           <channel> =\= <channel>

<logix_guard_clauses>  ::= <logix_guard_clause> 
                           <logix_guard_clause> ; <logix_guard_clauses>

<logix_guard_clause>   ::= {<logix_ask_guard>} , <right_hand_side>
                           {(<logix_guard>)} , <right_hand_side>

<logix_guard>          ::= <logix_ask_guard_list>
                           <logix_ask_guard_list> : <logix_tell_guard_list>

<logix_ask_list>       ::= <logix_ask_guard>
                           <logix_ask_guard> , <logix_ask_list>

<logix_tell_list>      ::= <logix_tell_guard>
                           <logix_tell_guard> , <logix_tell_list>

<body>                 ::= <call>
                           <call> | <body>

<call>                 ::= <local_call>
                           <local_sum>
                           <nested_scope>
                           <ambient>
                           <external_call>
                           {<logix_goal>}
                           {(<logix_goal_list>)}
                           self
			   self( <substitution_list> )
                           true
                           0
<nested_scope>         ::= << <new_scope> >>

<ambient>              ::= <ambient_name>(<< <new_scope> >>)

<local_sum>            ::= <local_call>
                           <local_call> + <local_sum>

<local_call>           ::= <atom>
                           <process_name>( <substitution_list> )

<substitution_list>    ::= <substitution>
                           <substitution> , <substitution_list>

<substitution>         ::= <argument> = <argument>

<new_scope>            ::= <new_declaration_list> . <scope_content>
                           <scope_content>

<scope_content>        ::= <right_hand_side>
                           <right_hand_side> . <process_definitions>

<external_call>        ::= <logix_path_term>#<atom>
                           <logix_path_term>#<logix_goal>
                           <logix_path_term>#<external_call>

<logix_goal_list>      ::= <logix_goal>
                           <logix_goal> , <logix_goal_list>

Primitives:


A <channel> is an alpha-numeric string, beginning with a lower-case
alphabetic character; the string may contain underscore (_) characters.


The <direction>s are:

    local designating a normal within-ambient channel
          (equivalent to no direction);
    p2c   designating a parent-to-child communication;
    c2p   designating a child-to-parent communication;
    s2s   designating a sibling-to-sibling communication.


A <base_rate> is a real number, which is a factor in the stochastic weighting
of a <channel>.  When the <base_rate> of a <channel> is 0, the
channel acts as a sink - all messages on that channel are discarded.

A <base_rate> may be specified by a logix variable for a new channel,
but not for the default nor for a global channel.  The logix variable
should be instantiated to a number.


A <weighter> is an alpha-numeric string, beginning with a lower-case
alphabetic character; the string may contain underscore (_)
characters.

A <weighter> may be specified by a logix variable for a new channel,
but not for the default nor for a global channel.  The logix variable
should be instantiated to a string.

Any <weighter_parameter_list> element may be specified by a logix
variable for a new channel, but not for the default nor for a global
channel.  The logix variable should be instantiated to a string as
above (for the <weighter> name) or to a number (for any other parameter).


A <process_name> is an alpha-numeric string, beginning with an upper case
letter, which may contain underscore (_) characters.


An <ambient_name> is an alpha-numeric string, beginning with a lower-case
alphabetic character; the string may contain underscore (_) characters.


A <logix_variable> is an alpha-numeric string, beginning with an upper-case
alphabetic character; the string may contain underscore (_) characters,
or it may be a single underscore character.  By convention the single
underscore character is an anonymous <logix_variable>; it may only appear in
a <message> or within a <logix_guard>, a <logix_ask_guard> or a <logix_goal>.

WARNING:  when the single underscore character <logix_variable> appears in a
<message>, it should not appear in place of a <channel>, unless the
corresponding sent <channel> is defined by a <global_declaration>.


A <logix_ask_guard> is any predicate permitted in the ask of a guard in logix
language(compound).

A <logix_tell_guard> is any predicate permitted in the tell of a guard in logix
language(compound).

A <logix_goal> is any predicate permitted in the right-hand-side of a clause
in logix language(compound).

A <logix_path_term> is any term permitted in the path specification of a remote
procedure call in logix language(compound).


Notes:

The "new" predicate has been subsumed into a prefix <new_declaration_list>
of a <new_scope> and the added <new_declaration_list> of a <process>.


The <argument>s of a <process> are provided by a caller.  An <argument>
may be "extruded" from a <process> by a <send>.


A <process> which is declared at level one of a <program> definition, may be
called by an external process.


Nested "new" processes are scoped with double angle brackets (see definition
of <new_scope>).


The reserved words are "self", "true", "otherwise", "enter", "accept",
"exit", "expel", "merge", "p2c", "c2p", "s2s".
They are reserved in context, and may be used as channel names.

"self" may be used to iterate any process, including anonymous processes.
"true" is an alternative name for process 0.
"otherwise" appears as the guard of the last clause of <comparisons>.
The remaining words are prefix operators in capabilities and directions.


A  new <argument> which is a <logix_variable> is initially uninstantiated.


Within a <logix_term>, normal logix recognition of variables applies - i.e.
variable names all begin with a capital letter or underscore; to reference a
<channel>, whose name begins with a lower case letter, within a 
<logix_term>, refer to '_var'(<channel>).


A <logix_variable> may have a value which is an arbitrary logix term.  Such
values may be tested by a <logix_ask_guard> or manipulated by a <logix_goal>
or by a <logix_tell_guard>.  An arbitrary <logix_term> may be sent in a
<message> by the library <logix_goal> psi_send/2, or received by the logix
goal, psi_receive/2:

    psi_send(<message_content>, <channel>)
    psi_receive(<channel>, <message_content>)

e.g.

    psi_send({"A string", a(Tuple), [A, list | Tail]}, '_var'(channel))

    psi_receive('var'(another_channel), {Arg1, String(f(x)), Arg3})

The library <logix_goal>s psi_send/3, psi_receive/3, psi_send/4, psi_receive/4
may be used as well, where the third argument is a multiplier (default 1), and
the fourth argument is an identifier (default sender or receiver).


The additive definition of <left_hand_side> is syntactic sugar - e.g.

    P+(<argument_list>) ::= <right_hand_side>.

is equivalent to:

    P ::= << <argument_list> . P1 . P1 ::= <right_hand_side> >> .

The recursive definition of <right_hand_side> is syntactic sugar - e.g.

    P ::= <communication1> , {<logix_ask_guard>} , Q;
          <communication2> , (<comparison> , R; otherwise , S).

is equivalent to:

    P ::= <communication1> , << P1 . P1 ::= {<logix_ask_guard>} , Q >>;
          <communication2> , << P2 . P2 ::= <comparison> , R ; otherwise , S >>.

and

    P ::= <communication> , ( {<logix_ask_guard1>} , Q ;
                              {<logix_ask_guard2>} , R ) .

is equivalent to:

    P ::= <communication> , << P1 . P1 ::= {<logix_ask_guard1>} , Q ;
                                           {<logix_ask_guard2>} , R >> .


Each <local_call> in a <local_sum> must be to  <process> whose
<right_hand_side> consists of <communication_clauses>.
