#!/usr/local/bin/perl
$| = 1;

my $BLANKS = "                                                               ";
my $sum_acct = "/home/system/bin/sum_acct";
my $SUM_PREFIX = "/var/adm/month_report/acct_summary_local";

my $VERSION = "1.0 - 3 May, 1995";

my $Column_Width =  6;
my $Name_Width   = 10;
my $Total_Width  =  7;
my $Total_Index  =  2;
my $First_Month  = 199709;
my $Last_Month   = 199808;
#my $First_Month  = 199902;
#my $Last_Month   = 199903;
my $Platform;
my $UserList;
my $Title;

my @Users;
my %Users;
my @Totals;
my @Months;

sub format_output
{
  my $user = shift;
  my $ix = shift;
  my $type = $user[0];
  my $line = "";
  my $item = "";

  while ($ix <= $Total_Index) {
    if (++$ix == 1) {
      # Left-justify name.
      $item = $user->[$ix] .
	      substr($BLANKS, 0, $Name_Width-length($user->[$ix]));
    }
    elsif ($ix < $Total_Index) {
      # Right-justify column entry.
      $item = substr($BLANKS, 0, $Column_Width-length($user->[$ix])) .
	      $user->[$ix];
    }
    else {
      # Right-justify total.
      $item = substr($BLANKS, 0, $Total_Width-length($user->[$ix])) .
	      $user->[$ix];
    }
    if (length($line) + length($item) > 80 && $line) {
      --$ix;
      last;
    }
    $line .= $item;
  }
  if ($user->[$Total_Index] ne "0:00" || !$user->[0]) {
    print "$line\n";
  }
  return $ix;
}


sub format_hours_and_minutes
{
  my $user = shift;
  my $ix;
  for ($ix = 2; $ix <= $Total_Index; $ix++) {
    my $minutes = $user->[$ix];
    $user->[$ix] = int($minutes/60) . ':' . substr(($minutes % 60)+100, 1, 2);
  }
}


sub read_data
{
  while(<USERS>) {
    @line = split /\s+/;
    if (scalar(@line) < 2) {
      next;
    }
    my $id = shift @line;
    my $name = join ' ', @line;
    if (length($name) > $Name_Width) {
      $Name_Width = length($name);
    }
    $Users{$id} = scalar(@Users);
    push @Users, [$id, $name];
  }
}


sub make_months
{
  my $date = $First_Month;
  my $item;

  while ($date <= $Last_Month) {
    $item = ($date % 100) . "-" . int($date/100);
    $Months[$Total_Index++] = $item;
    $date += 88 if (++$date % 100 > 12);
  }
}


sub read_month
{
  my $date = (shift) % 10000;
  my @lines = split /\n/, `rsh $Platform \"cat $SUM_PREFIX.$date\"`;
  (shift @lines) or die "Can't read $SUM_PREFIX.$date";
  return @lines;
}


sub cumulate_usage
{
  my $date = $First_Month;
  my $ix = 2;
  while ($date <= $Last_Month) {
    print STDERR ".";
    my $line;
    my @lines = read_month($date);
    $date += 88 if (++$date % 100 > 12);
    foreach $line (@lines) {
      my ($id, $b, $usage) = split /\s+/, $line;
      my $index  = $Users{$id};
      if (defined($index)) {
	$usage =~ s/^(\d+)\D+$/$1/;
	$user = $Users[$index];
	$user->[$ix] = $usage;
	$Totals[$ix] += $usage;
	$user->[$Total_Index] += $usage;
	$Totals[$Total_Index] += $usage;
      }
    }
    $ix++;
  }
  print STDERR "\n";
}


sub adjust_widths
{
  my $ix;
  for ($ix = 2; $ix < $Total_Index; $ix ++) {
    if ($Column_Width <= length($Totals[$ix])+1) {
      $Column_Width = length($Totals[$ix]) + 2;
    }
    if ($Column_Width <= length($Months[$ix])+1) {
      $Column_Width = length($Months[$ix]) + 2;
    }
  }
  if ($Total_Width <= length($Totals[$Total_Index])+2) {
    $Total_Width = length($Totals[$Total_Index]) + 3;
  }
}


sub print_options
{
  my $quit = shift;
  print "report-users version $VERSION.\n" .
        "Options are: -h, -t<title>, -m<first month>-<last month>\n" .
        "   where <month> has the form yyyymm, and\n" .
        "   <first month> does not exceed <last month>.\n";
  if (defined $quit) {
    exit $quit;
  }
}

sub initialize
{
  my $ix = 0;
  while ($ix < scalar @ARGV) {
    my $arg = $ARGV[$ix];
    if ($arg =~ /^-(.*)$/) {
      if ($arg =~ /^-h(.*)$/) {
	print_options(0);
      }
      elsif ($arg =~ /^-t(.*)$/) {
	$Title = $1;
      }
      elsif ($arg =~ /^-m(\d*)\W(\d*)$/) {
	$First_Month = $1;
	$Last_Month = $2;
      }
      else {
	print_options(1);
      }
      splice @ARGV, $ix, 1;
      next;
    }
    $ix++;
  }
  if ($First_Month > $Last_Month) {
    print_options(1);
  }
  $Platform = shift @ARGV;
  $UserList = shift @ARGV;
  open(USERS, $UserList) or die "Can't open input";

  unshift @Months, "", "User Name";
  make_months();
  push @Months, "Total";
  $Title = "Report of $UserList cpu Usage (hhhh:mm) of $Platform"
    if (!$Title);
  $ix = length($Title);
  $Title .= "\n";
  while (length($Title) < 2*$ix + 1) {
    $Title .= "-";
  }

  unshift @Totals, "", "Total";

  read_data();
}


# main <platform> <file-name>

initialize(@ARGV);

my $user;
my $ix;
my @line;

cumulate_usage();
for ($ix = 0; $ix < scalar @Users; $ix++) {
  format_hours_and_minutes($Users[$ix]);
}
format_hours_and_minutes(\@Totals);
adjust_widths();
my @line2;
unshift @Users, \@Months, \@line2;
push @Users, \@line2, \@Totals;

my $ax = 0;
my $outfile = 1;
while (1) {
  my $filename = "$Platform-$First_Month.$outfile";
  open(STDOUT, "> $filename") or
    die "Can't open : file '$filename'";
  print "$Title\n\n" if ($outfile++ == 1);
  foreach $user (@Users) {
    $ix = format_output($user, $ax);
  }
  if ($ix > $Total_Index) {
    last;
  }
  print "\n\n";
  $ax = $ix;
}
