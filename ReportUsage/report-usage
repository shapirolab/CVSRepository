#!/usr/local/bin/perl
$| = 1;

my $BLANKS = "                                                               ";
my $sum_acct = "/home/system/bin/sum_acct";
my $SUM_PREFIX = "/var/adm/month_report/acct_summary_local";

my $VERSION = "1.0 - 3 May, 1995";

my $Column_Width =  6;
my $Name_Width   = 10;
my $Total_Width  =  7;
my $Total_Index  =  2;
my $First_Month  = undef;
my $Last_Month   = undef;
my $One_Page     = 1;
my $Sort_By_Name = 0;
my $Max_Width    = 1000000;

my $Platform;
my $UserList;
my $Title;

my @Users;
my %Users;
my @Totals;
my @Months;

sub format_output
{
  my $user = shift;
  my $ix = shift;
  my $type = $user[0];
  my $line = "";
  my $item = "";

  while ($ix <= $Total_Index) {
    if (++$ix == 1) {
      # Left-justify name.
      $item = $user->[$ix] .
	      substr($BLANKS, 0, $Name_Width-length($user->[$ix]));
    }
    elsif ($ix < $Total_Index) {
      # Right-justify column entry.
      $item = substr($BLANKS, 0, $Column_Width-length($user->[$ix])) .
	      $user->[$ix];
    }
    else {
      # Right-justify total.
      $item = substr($BLANKS, 0, $Total_Width-length($user->[$ix])) .
	      $user->[$ix];
    }
    if (length($line) + length($item) > $Max_Width && $line) {
      --$ix;
      last;
    }
    $line .= $item;
  }
  if ($user->[$Total_Index] ne "0:00" || !$user->[0]) {
    print "$line\n";
  }
  return $ix;
}


sub format_hours_and_minutes
{
  my $user = shift;
  my $ix;
  for ($ix = 2; $ix <= $Total_Index; $ix++) {
    my $minutes = $user->[$ix];
    $user->[$ix] = int($minutes/60) . ':' . substr(($minutes % 60)+100, 1, 2);
  }
}


sub read_data
{
  open(USERS, $UserList) or die "Can't open User List";
  while(<USERS>) {
    @line = split /\s+/;
    if (scalar(@line) < 2) {
      next;
    }
    my $id = shift @line;
    my $name = join ' ', @line;
    if (length($name) > $Name_Width) {
      $Name_Width = length($name);
    }
    $Users{$id} = scalar(@Users);
    push @Users, [$id, $name];
  }
  close USERS;
}


sub make_months
{
  my $date = $First_Month;
  my $item;

  while ($date <= $Last_Month) {
    $item = ($date % 100) . "-" . int($date/100);
    $Months[$Total_Index++] = $item;
    $date += 88 if (++$date % 100 > 12);
  }
}


sub read_month
{
  my $date = (shift) % 10000;
  my @lines = split /\n/, `rsh $Platform \"cat $SUM_PREFIX.$date\"`;
  (shift @lines) or die "Can't read $SUM_PREFIX.$date";
  return @lines;
}


sub cumulate_usage
{
  my $date = $First_Month;
  my $ix = 2;
  while ($date <= $Last_Month) {
    print STDERR ".";
    my $line;
    my @lines = read_month($date);
    $date += 88 if (++$date % 100 > 12);
    foreach $line (@lines) {
      my $index = undef;
      my ($id, $b, $usage) = split /\s+/, $line;
      if (!defined($UserList)) {
	if (!exists($Users{$id})) {
	  $Users{$id} = scalar(@Users);
	  my @user = ($id, $id);
	  push @Users, \@user;
	}
      }
      $index  = $Users{$id};
      if (defined($index)) {
	$user = $Users[$index];
	$user->[$ix] = $usage;
	$Totals[$ix] += $usage;
	$user->[$Total_Index] += $usage;
	$Totals[$Total_Index] += $usage;
      }
    }
    $ix++;
  }
  print STDERR "\n";
}


sub adjust_widths
{
  my $ix;
  for ($ix = 2; $ix < $Total_Index; $ix ++) {
    if ($Column_Width <= length($Totals[$ix])+1) {
      $Column_Width = length($Totals[$ix]) + 2;
    }
    if ($Column_Width <= length($Months[$ix])+1) {
      $Column_Width = length($Months[$ix]) + 2;
    }
  }
  if ($Total_Width <= length($Totals[$Total_Index])+2) {
    $Total_Width = length($Totals[$Total_Index]) + 3;
  }
}


sub extract_name
{
  my @name = split / /, shift;
  my $name = pop @name;
  unshift @name, $name;
  $name = join " ", @name;
}


sub sort_users
{
  # The only reason I am using an insert sort here, is because
  # I can't get the perl sort to work for @Users !??

  my @Sorted = ();
  my $ix, $is;

  for ($ix = 0; $ix < scalar(@Users); $ix++) {
    my $user = $Users[$ix];
    my $item = undef;
    my $name = extract_name($user->[1]);
    for ($is = 0; $is < scalar(@Sorted); $is++) {
      $item = $Sorted[$is];
      if ($Sort_By_Name) {
	last if extract_name($item->[1]) ge $name;
      }
      else {
	last if $item->[$Total_Index] >= $user->[$Total_Index];
      }
    }
    if (defined($item)) {
      splice @Sorted, $is, 0, $user;
    }
    else {
      $Sorted[$is] = $user;
    }
  }
  @Users = @Sorted;
}

sub print_options
{
  my $quit = shift;
  print "report_usage - version $VERSION.\n" .
        "call: report-usage [options] [[User List] Platform]\n" .
        "options: -h -m<first_month>-<last_month> -s<type> -t<title> -w<width>\n" .
        "   -m... - default is this year.\n" .
        "       <... month> has the form yyyymm, and\n" .
        "       <first_month> must not exceed <last_month>.\n" .
        "       -<last month> may be omitted - default <first month> + 11 months.\n" .
        "   -w... - default no limit on number of columns in report;\n" .
        "       <width> may be omitted - default 80 columns;\n" .
        "   -s... - default sort by usage, and\n" .
        "       <type> is 'name' or 'usage' - default sort by name;\n";
  if (defined $quit) {
    exit $quit;
  }
}


sub read_arguments
{
  my $ix = 0;
  my $help = 0;
  while ($ix < scalar @ARGV) {
    my $arg = $ARGV[$ix];
    if ($arg =~ /^-(.*)$/) {
      if ($arg =~ /^-h(.*)$/) {
	$help = 1;
      }
      elsif ($arg =~ /^-s$/ || $arg =~ /^-sname$/) {
	$Sort_By_Name = 1;
      }
      elsif ($arg =~ /^-susage$/) {
	$Sort_By_Name = 0;
      }
      elsif ($arg =~ /^-t(.*)$/) {
	$Title = $1;
      }
      elsif ($arg =~ /^-w(\d*)$/) {
	$Max_Width = $1 ? $1 : 80;
	$One_Page = 0;
      }
      elsif ($arg =~ /^-m(\d*)$/) {
	$First_Month = $1;
	$Last_Month = $First_Month + 99;
	if ($Last_Month % 100 == 0) {
	  $Last_Month -= 88;
	}
      }
      elsif ($arg =~ /^-m(\d*)\W(\d*)$/) {
	$First_Month = $1;
	$Last_Month = $2;
      }
      else {
	print_options(1);
      }
      splice @ARGV, $ix, 1;
      next;
    }
    $ix++;
  }
  if ($First_Month > $Last_Month) {
    print_options(1);
  }
  if ($help) {
    print_options(scalar(@ARGV) ? undef : 0);
  }
  if (scalar(@ARGV) == 0) {
    print "No Platform or User List specified.\n";
    exit 1;
  }
  if (scalar(@ARGV) > 1) {
    $UserList = shift @ARGV;
  }
  $Platform = shift @ARGV;

  if (!defined($First_Month)) {
    my ($sec, $min, $hour, $mday, $mon, $year) = localtime();
    $mon-- if $mday == 1;
    if ($mon <= 1) {
      print "No data available for this year.\n";
      exit 0;
    }
    $First_Month = (1900 + $year)*100 + 1;
    $Last_Month = $First_Month + $mon - 1;
  }
}


sub initialize
{
  read_arguments();

  unshift @Months, "", "User Name";
  make_months();
  push @Months, "Total";
  $Title = "Report of $UserList cpu Usage (hhhh:mm) of $Platform"
    if (!$Title);
  $ix = length($Title);
  $Title .= "\n";
  while (length($Title) < 2*$ix + 1) {
    $Title .= "-";
  }

  unshift @Totals, "", "Total";

  if (defined $UserList) {
    read_data();
  }
}


# main <platform> <file-name>

initialize(@ARGV);

my $user;
my $ix;
my @line;

cumulate_usage();
sort_users();
for ($ix = 0; $ix < scalar @Users; $ix++) {
  format_hours_and_minutes($Users[$ix]);
}
format_hours_and_minutes(\@Totals);
adjust_widths();
my @line2;
unshift @Users, \@Months, \@line2;
push @Users, \@line2, \@Totals;

my $ax = 0;
my $outfile = $One_Page ? "txt" : 1;
while (1) {
  my $filename = "$Platform-$First_Month.$outfile";
  open(STDOUT, "> $filename") or
    die "Can't open : file '$filename'";
  print "$Title\n\n" if ($outfile++ == 1 || $outfile == "txt");
  foreach $user (@Users) {
    $ix = format_output($user, $ax);
  }
  if ($ix > $Total_Index) {
    last;
  }
  print "\n\n";
  $ax = $ix;
}
